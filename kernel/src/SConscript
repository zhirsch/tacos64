# -*- mode: python -*-
Import('env')

# Create the SCons environment.
env = env.Clone(
    CC = 'x86_64-elf-gcc',
    CCFLAGS = [
        '-O$OPTLEVEL',
        '-Wall',
        '-Werror',
        '-Wextra',
        '-Wstack-usage=512',
        '-fdata-sections',
        '-ffreestanding',
        '-ffunction-sections',
        '-fno-common',
        '-fno-delete-null-pointer-checks',
        '-fno-exceptions',
        '-fno-omit-frame-pointer',
        '-fno-pie',
        '-fstack-usage',
        '-g3',
        '-gdwarf',
        '-m64',
        '-mcmodel=kernel',
        '-mno-red-zone',
    ],
    ASPPFLAGS = [
        '-DASM_FILE',
        '-O$OPTLEVEL',
        '-g3',
        '-gdwarf',
    ],
    LINKFLAGS = [
        '-T$LDSCRIPT',
        '-Wl,--fatal-warnings',
        '-Wl,--gc-sections',
        '-Wl,--print-gc-sections',
        '-Wl,-z,defs',
        '-Wl,-z,max-page-size=4096',
        '-ffreestanding',
        '-nostdlib',
        '-static',
    ],
    CPPPATH = [
        '#bld/$T/kernel/include',
    ],
    LDSCRIPT = env.File('#kernel/ld/link.ld'),
    OPTLEVEL = {
        'debug': '0',
    }.get(env['T'], '2'),
)

# Compile.
objects = env.Object([
    'asm/boot.S',
    'asm/boot64.S',
    'asm/multiboot2.S',
    'cpu/apic.c',
    'cpu/asm/idt.S',
    'cpu/asm/isr.S',
    'cpu/asm/tss.S',
    'cpu/gdt.c',
    'cpu/idt.c',
    'cpu/tss.c',
    'kernel.c',
    'string/snprintf.c',
    'terminal/terminal.c',
])

# Link.
kernel = env.Program('tacos64', objects)
env.Depends(kernel, '$LDSCRIPT')

Return(['kernel'])
